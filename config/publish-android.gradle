apply plugin: 'maven-publish'

/**
 * Sources Jar
 */
android.libraryVariants.all { variant ->
    renameLibraryVariantOutput(variant)

    task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
        classifier = 'sources'
        from variant.sourceSets*.java.srcDirs.flatten()
        baseName = buildLibraryArchiveBaseName(variant)
    }
}

/**
 * Maven Publication
 */
publishing {
    repositories {
        maven {
            name "nexus"
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url project.android.defaultConfig.versionName.endsWith('-SNAPSHOT') ? nexusSnapshotsRepository : nexusReleasesRepository
        }
    }

    afterEvaluate {
        publications {
            android.libraryVariants.each { variant ->
                "${variant.name}"(MavenPublication) {
                    groupId project.group
                    artifactId "${project.name}${variant.buildType.name == "release" ? "" : "-${variant.buildType.name}"}"
                    version project.android.defaultConfig.versionName

                    artifact tasks["bundle${variant.name.capitalize()}Aar"]
                    artifact tasks["generate${variant.name.capitalize()}SourcesJar"]

                    pom {
                        packaging = 'aar'
                        name = project.title
                        description = project.description
                        url = project.scm.url

                        developers {
                            project.developers.each { d ->
                                developer {
                                    id = d.id
                                    name = d.name
                                    email = d.email
                                }
                            }
                        }

                        scm {
                            connection = project.scm.connection
                            developerConnection = project.scm.developerConnection
                            url = project.scm.url
                        }

                        withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            variant.compileConfiguration.allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                if (!it.excludeRules.empty) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    model {
        tasks."generatePomFileFor${variant.name.capitalize()}Publication" {
            destination = new File(destination.parent, "${buildLibraryArchiveBaseName(variant)}-pom.xml")
        }
    }
}
